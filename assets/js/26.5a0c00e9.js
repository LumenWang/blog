(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{423:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-动态分配内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-动态分配内存"}},[t._v("#")]),t._v(" 1 动态分配内存")]),t._v(" "),a("h2",{attrs:{id:"_1-1-new-和-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-new-和-delete"}},[t._v("#")]),t._v(" 1.1 new 和 delete")]),t._v(" "),a("blockquote",[a("p",[t._v("函数原型：\nvoid *operator new(size_t);     //allocate an object\nvoid *operator delete(void *);    //free an object")])]),t._v(" "),a("h3",{attrs:{id:"_1-1-1-new和delete的运行机制（单个对象）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-new和delete的运行机制（单个对象）"}},[t._v("#")]),t._v(" 1.1.1 new和delete的运行机制（单个对象）")]),t._v(" "),a("p",[t._v("以类A为例：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("var")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fopen_s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fclose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" var"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    FILE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("当我们用new创建一个A类的指针数组时，new返回的是指向内存空间的A类型的指针")]),t._v(" "),a("blockquote",[a("p",[t._v("class *pA = new A(10);")])]),t._v(" "),a("p",[t._v("背后完成的工作是:"),a("br"),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2019032715323358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\nnew的工作有以下几点：")]),t._v(" "),a("ol",[a("li",[t._v("由于A类的大小是8 Bytes（参考《深入C++对象模型》），那么new函数就会开辟一个8 Bytes的地址空间，但内存空间没有初始化和类型化")]),t._v(" "),a("li",[t._v("对内存空间进行类对象的初始化。调用构造函数，给private基本变量赋值，指针变量指向对应位置")]),t._v(" "),a("li",[t._v("返回对象指针")])]),t._v(" "),a("p",[t._v("当我们用delete释放掉类对象的时候")]),t._v(" "),a("blockquote",[a("p",[t._v("delete pA;")])]),t._v(" "),a("p",[t._v("背后完成的工作是："),a("br"),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327153859419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\ndelete的工作有以下几点：")]),t._v(" "),a("ol",[a("li",[t._v("调用指针所指向对象的析构函数，对打开的文件进行关闭")]),t._v(" "),a("li",[t._v("通过调用delete库函数来释放掉该对象的内存空间，传入的参数是指针pA，也就是对象的地址")])]),t._v(" "),a("h3",{attrs:{id:"_1-1-2-用new-type-和delete-申请和释放数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-用new-type-和delete-申请和释放数组"}},[t._v("#")]),t._v(" 1.1.2 用new type[]和delete []申请和释放数组")]),t._v(" "),a("ol",[a("li",[t._v("申请和释放基本数据类型的数组空间\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327154233522.png",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327154241694.png",alt:"在这里插入图片描述"}}),t._v("\n这里会发现，创建数组和创建单个对象的不同，这里new 和 delete变成了:\ntype *name = new type[ ];\ndelete [] name;")])]),t._v(" "),a("p",[t._v("在上面的例子中，释放string类型数组空间时实际上先为10个string对象分别调用析构函数，再释放掉为10个string对象所分配的所有内存空间；而释放int类型数组空间时，因为int是==内置类型==不存在析构函数，所以直接释放掉了为10个int类型变量分配的所有空间。")]),t._v(" "),a("p",[t._v("因此，非内置类型数据用new type[] 来动态分配内存时，必须保存数据的维度，以确定在析构时需要调用对象析构函数的次数。C++的做法是在分配数组空间时在前面多分配了4 Bytes 大小的空间，专门保存数组的维度，在delete的时候根据数据维度调用析构函数，最后再释放所有内存空间。")]),t._v(" "),a("p",[t._v("以创建pA类对象数组为例说明 Type *name = new Type[] 和 delete[] name的运行机制\n首先为对象数组分配内存空间：")]),t._v(" "),a("blockquote",[a("p",[t._v("class A *pAa = new A[3];")])]),t._v(" "),a("p",[t._v("背后的工作是："),a("br"),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327155300299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n当我们释放对象数组的内存空间时：")]),t._v(" "),a("blockquote",[a("p",[t._v("delete [] pAa;")])]),t._v(" "),a("p",[t._v("背后的工作是：\n"),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327155342164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n正如前面所说：依次为数组中每个对象调用析构函数，调用析构函数的总次数是由调用new库函数时开辟的内存空间的前4 Bytes 中保存的数据决定的；调用delete[] name 库函数时，其参数不是指针name的值(也是第一个数组元素的地址)，而是这个地址值减去4 Bytes")]),t._v(" "),a("h1",{attrs:{id:"_2-内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存泄漏"}},[t._v("#")]),t._v(" 2 内存泄漏")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2019032715574439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),t._v(" "),a("h1",{attrs:{id:"_2-1-malloc-和-free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-malloc-和-free"}},[t._v("#")]),t._v(" 2.1 malloc 和 free")]),t._v(" "),a("ol",[a("li",[t._v("头文件是#include<stdlib.h>，函数声明为:")])]),t._v(" "),a("blockquote",[a("p",[t._v("void* malloc(size_t size);")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("参数size_t size表示动态内存分配空间的大小，以字节为单位。")]),t._v(" "),a("li",[t._v("malloc()函数的返回值是一个指针，或者说是分配后内存空间的首地址.")]),t._v(" "),a("li",[t._v("如果malloc()函数申请空间成功则返回一段内存空间的首地址，失败则返回NULL")]),t._v(" "),a("li",[t._v("返回指针类型需要强制类型转换（有安全隐患）")])]),t._v(" "),a("blockquote",[a("p",[t._v("int *p = (int *) malloc(sizeof(int));")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("在使用malloc()函数申请的空间之前，最好用memset()函数把这段内存空间清理一下。malloc智能保证内存空间的大小，无法保证是否有垃圾数据")]),t._v(" "),a("li",[t._v("malloc和free要配对使用，否则会内存泄漏")])]),t._v(" "),a("p",[t._v("案例：")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0.包含头文件<stdlib.h>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.定义一个char* 指针变量p，并分配10个字节内存空间(字符数组)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2.将字符数组中的内容全部修改为0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3.复制一段字符串到p指向的数组空间(长度要比所分配的内存小)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4.用realloc扩充p指向的内存空间")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("realloc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4.在原字符串后面再拼接一段字符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5.释放空间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("h1",{attrs:{id:"_3-new-delete-和-malloc-free的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-new-delete-和-malloc-free的区别"}},[t._v("#")]),t._v(" 3 new/delete 和 malloc/free的区别")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327161620749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327161629487.png",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327161717877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327161732205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/2019032716181254.png",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327161854498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327162011803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327162138379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327162209460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327162245352.png",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327162348440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190327162359989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDkzNzEwMA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n其他（与上文提到的有重复）：")]),t._v(" "),a("ol",[a("li",[t._v("new、delete是C++中的操作符(关键字)，通过特定的语法可以组成表达式。malloc和free是标准库函数。")]),t._v(" "),a("li",[t._v("malloc free是库函数，不是运算符，不在编译器控制范围之内，不能够自动调用构造函数和析构函数。mallloc只是为变量分配了内存，free只是释放变量的内存。")]),t._v(" "),a("li",[t._v("new在为对象申请分配内存空间时，可以自动调用构造函数，同时也可以完成对对象的初始化。同理，delete也可以自动调用析构函数。")]),t._v(" "),a("li",[t._v("new返回的是指定类型的指针，并且可以自动计算所申请内存的大小；malloc需要我们计算申请内存的大小，并且在返回时强行转换为实际类型的指针。")]),t._v(" "),a("li",[t._v("new从自由存储区分配内存；malloc从堆上分配内存。")]),t._v(" "),a("li",[t._v("与malloc、free相比，new、delete不仅能动态分配内存空间，而且会调用构造函数、析构函数对对象进行初始化和销毁。")])]),t._v(" "),a("p",[t._v("参考:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.csdn.net/linux_ever/article/details/50533149",target:"_blank",rel:"noopener noreferrer"}},[t._v("C/C++——C++中new与malloc的10点区别"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/xiaonan153/article/details/80784874",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++读书笔记—malloc()函数的注意点及使用示例"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);